const f=(e,s)=>{const n=e.toLowerCase(),o=s.toLowerCase(),a=[];let l=0,r=0;const u=(t,p=!1)=>{let c="";r===0?c=t.length>20?`… ${t.slice(-20)}`:t:p?c=t.length+r>100?`${t.slice(0,100-r)}… `:t:c=t.length>20?`${t.slice(0,20)} … ${t.slice(-20)}`:t,c&&a.push(c),r+=c.length,p||(a.push(["strong",s]),r+=s.length,r>=100&&a.push(" …"))};let i=n.indexOf(o,l);if(i===-1)return null;for(;i>=0;){const t=i+o.length;if(u(e.slice(l,i)),l=t,r>100)break;i=n.indexOf(o,l)}return r<100&&u(e.slice(l),!0),a};function $(e){return e}const h=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},d="__vueuse_ssr_handlers__";h[d]=h[d]||{};var g;(function(e){e.UP="UP",e.RIGHT="RIGHT",e.DOWN="DOWN",e.LEFT="LEFT",e.NONE="NONE"})(g||(g={}));var m=Object.defineProperty,y=Object.getOwnPropertySymbols,C=Object.prototype.hasOwnProperty,w=Object.prototype.propertyIsEnumerable,I=(e,s,n)=>s in e?m(e,s,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[s]=n,N=(e,s)=>{for(var n in s||(s={}))C.call(s,n)&&I(e,n,s[n]);if(y)for(var n of y(s))w.call(s,n)&&I(e,n,s[n]);return e};const Q={easeInSine:[.12,0,.39,0],easeOutSine:[.61,1,.88,1],easeInOutSine:[.37,0,.63,1],easeInQuad:[.11,0,.5,0],easeOutQuad:[.5,1,.89,1],easeInOutQuad:[.45,0,.55,1],easeInCubic:[.32,0,.67,0],easeOutCubic:[.33,1,.68,1],easeInOutCubic:[.65,0,.35,1],easeInQuart:[.5,0,.75,0],easeOutQuart:[.25,1,.5,1],easeInOutQuart:[.76,0,.24,1],easeInQuint:[.64,0,.78,0],easeOutQuint:[.22,1,.36,1],easeInOutQuint:[.83,0,.17,1],easeInExpo:[.7,0,.84,0],easeOutExpo:[.16,1,.3,1],easeInOutExpo:[.87,0,.13,1],easeInCirc:[.55,0,1,.45],easeOutCirc:[0,.55,.45,1],easeInOutCirc:[.85,0,.15,1],easeInBack:[.36,0,.66,-.56],easeOutBack:[.34,1.56,.64,1],easeInOutBack:[.68,-.6,.32,1.6]};N({linear:$},Q);const b=Object.entries,v=Object.keys,E=e=>e.reduce((s,{type:n})=>s+(n==="title"?50:n==="heading"?20:n==="custom"?10:1),0),_=(e,s)=>{var n;const o={};for(const[a,l]of b(s)){const r=((n=s[a.replace(/\/[^\\]*$/,"")])==null?void 0:n.title)||"",u=`${r?`${r} > `:""}${l.title}`,i=f(l.title,e);i&&(o[u]=[...o[u]||[],{type:"title",path:a,display:i}]),l.customFields&&b(l.customFields).forEach(([t,p])=>{p.forEach(c=>{const O=f(c,e);O&&(o[u]=[...o[u]||[],{type:"custom",path:a,index:t,display:O}])})});for(const t of l.contents){const p=f(t.header,e);p&&(o[u]=[...o[u]||[],{type:"heading",path:a+(t.slug?`#${t.slug}`:""),display:p}]);for(const c of t.contents){const O=f(c,e);O&&(o[u]=[...o[u]||[],{type:"content",header:t.header,path:a+(t.slug?`#${t.slug}`:""),display:O}])}}}return v(o).sort((a,l)=>E(o[a])-E(o[l])).map(a=>({title:a,contents:o[a]}))},P=JSON.parse("{\"/\":{\"/intro.html\":{\"title\":\"介绍页\",\"contents\":[{\"header\":\"\",\"slug\":\"\",\"contents\":[\"将你的个人介绍和档案放置在此处。\"]}]},\"/devEnv/nvm.html\":{\"title\":\"Nvm 安装与使用\",\"contents\":[{\"header\":\"\",\"slug\":\"\",\"contents\":[\"nvm 是一个 nodejs 的版本管理工具。通过它可以安装和切换不同版本的 nodejs，解决 node 各种版本存在不兼容现象。\"]},{\"header\":\"卸载Node (没有安装可跳过此步骤)\",\"slug\":\"卸载node-没有安装可跳过此步骤\",\"contents\":[\"一定要确保卸载windows上的Nodejs。\",\"在控制面版或者应用列表中卸载nodejs\",\"不行就全局搜索然后删除相关文件\"]},{\"header\":\"下载Nvm\",\"slug\":\"下载nvm\",\"contents\":[\"下载地址\",\"我的电脑为win11，该版本可正常使用。\",\"安装包\"]},{\"header\":\"安装Nvm\",\"slug\":\"安装nvm\",\"contents\":[\"下载完成后，解压获得exe程序双击运行。\",\"选择同意安装协议\",\"安装协议\",\"Nvm安装路径，会包含所有之后下载的Node版本\",\"安装路径\",\"Nodejs存储路径，存放当前使用的Node\",\"存储路径\",\"点击install，等待安装完成\",\"安装\"]},{\"header\":\"安装Node\",\"slug\":\"安装node\",\"contents\":[\"使用管理员身份运行cmd，一定要使用管理员身份!!!\",\"cmd\",\"输入nvm list available 查看所有可供下载的Nodejs版本\",\"node list\",\"输入 nvm install [version] 安装所需的Nodejs版本,version为所需要的版本号\",\"输入 nvm list 查看已安装版本的node\",\"输入 nvm use [version] 切换使用指定的版本的node。\",\"再次输入 nvm list ,如果版本号前带星号则表示切换成功, 或者输入 nvm current 显示当前版本\",\"切换成功\"]},{\"header\":\"更多相关命令\",\"slug\":\"更多相关命令\",\"contents\":[\"nvm list 查看已经安装的版本\",\"nvm list installed 查看已经安装的版本\",\"nvm list available 查看网络可以安装的版本\",\"nvm version 查看当前的版本\",\"nvm install 安装最新版本\",\"nvm nvm use <version> ## 切换使用指定的版本\",\"node nvm ls 列出所有版本 nvm current显示当前版本\",\"nvm alias <name> <version> ## 给不同的版本号添加别名\",\"nvm unalias <name> ## 删除已定义的别名\",\"nvm reinstall-packages <version> ## 在当前版本node环境下，重新全局安装指定版本号的npm包\",\"nvm on 打开nodejs控制\",\"nvm off 关闭nodejs控制\",\"nvm proxy 查看设置与代理\",\"nvm node_mirror [url] 设置或者查看setting.txt中的node_mirror，如果不设置的默认是 Index of /dist/\",\"nvm npm_mirror [url] 设置或者查看setting.txt中的 npm_mirror,如果不设置的话默认的是： https://github.com/npm/npm/archive/\",\"nvm uninstall <version> 卸载制定的版本\",\"nvm use [version] [arch] 切换制定的node版本和位数\",\"nvm root [path] 设置和查看root路径\"]}],\"customFields\":{\"0\":[\"教程\"],\"1\":[\"Nvm\",\"Node\"]}},\"/start/buildblog.html\":{\"title\":\"使用 vuepress-theme-hope\",\"contents\":[{\"header\":\"\",\"slug\":\"\",\"contents\":[\"本文将记录从零开始使用 vuepress-theme-hope 构建属于自己的博客。\"]},{\"header\":\"安装 Node\",\"slug\":\"安装-node\",\"contents\":[\"从官网下载 Node, vuepress-theme-hope支持16的某些版本和18以后的版本，保险起见大家直接下最新的18。 安装完成后再命令行输入 node -v 查看，显示版本号即表示安装成功。 如果需要管理不同版本的Node,可参考 Nvm安装和使用。\"]},{\"header\":\"创建项目\",\"slug\":\"创建项目\",\"contents\":[\"在命令行窗口运行\",\"命令中的dir是一个参数，使用真实的目录名替换。也可以使用 pnpm 或者 yarn,我使用的是pnpm。 初始化过程中会有一些选项让你选择,包管理器选择pnpm,项目类型blog为博客类型网站，docs为文档类型。如果之后你想把网站挂到GitHub Pages上的话，在询问是否创建工作流的地方记得选一下yes。 安装完成后，进入项目文件运行：\"]},{\"header\":\"主页\",\"slug\":\"主页\",\"contents\":[\"使用src目录下的README.md文件来进行配置。\",\"更多的配置可查阅 vuepress-theme-hope 使用文档。\"]},{\"header\":\"项目打包\",\"slug\":\"项目打包\",\"contents\":[\"先使用下面的命令在本地打包，打完的内容在src/.vuepress/dist目录下：\"]}],\"customFields\":{\"0\":[\"教程\"],\"1\":[\"Blog\"]}},\"/start/githubPage.html\":{\"title\":\"Github Pages\",\"contents\":[{\"header\":\"\",\"slug\":\"\",\"contents\":[\"将博客部署在Github,依赖于创建项目时选择的github workflow工作流。\"]},{\"header\":\"新建仓库\",\"slug\":\"新建仓库\",\"contents\":[\"创建一个public仓库， 名称格式为 <USERNAME>.github.io, 部署完后通过https://<USERNAME>.github.io/这个域名来访问站点。\"]},{\"header\":\"修改配置\",\"slug\":\"修改配置\",\"contents\":[\"在github仓库中点击Settings选项卡，选择Actions下的General,在 Workflow permissions中选择读写权限 Read and write permissions后，点击保存。\",\"Settings\"]},{\"header\":\"代码提交\",\"slug\":\"代码提交\",\"contents\":[\"提交代码，查看Actions选项卡,绿色表示部署成功，如果失败可以点击进去查看详细的报错信息。\",\"Settings\"]},{\"header\":\"设置部署分支\",\"slug\":\"设置部署分支\",\"contents\":[\"打包后的内容位于src/.vuepress/dist/目录下，而项目中的工作流会默认将这个目录的内容推送到一个新的gh-pages 分支，因此我们还需要额外设置部署页面的分支。\",\"点击Settings选项卡下的Pages，在Build and deployment中选择新的分支：\",\"Settings\",\"切换部署分支后项目会自动重新执行一遍工作流，再过上一会就可以使用域名https://<USERNAME>.github.io/来访问页面了。\",\"并且，在以后每次修改完代码并push后，都会自动触发工作流，自动更新页面。\"]}],\"customFields\":{\"0\":[\"教程\"],\"1\":[\"Github\"]}},\"/start/waline.html\":{\"title\":\"Waline\",\"contents\":[{\"header\":\"\",\"slug\":\"\",\"contents\":[\"本文将介绍如何在blog中使用Waline评论插件。\"]},{\"header\":\"获取 APP ID 和 APP Key\",\"slug\":\"获取-app-id-和-app-key\",\"contents\":[\"请先 登录 或 注册 LeanCloud 国际版, 进入 控制台 后点击左下角 创建应用。创建应用后进入该应用，选择左下角的 设置 > 应用Key，然后记下 APP ID,APP Key 和 Master Key。\",\"之后点击下方按钮，跳转至 Vercel 进行快速部署。\",\"Vercel\"]},{\"header\":\"配置仓库\",\"slug\":\"配置仓库\",\"contents\":[\"按照要求输入 Vercel 项目名称与 GitHub 仓库名称。Vercel 会基于 waline 模板帮助你新建并初始化该仓库。仓库初始化完毕后，需要在 Environment Variables 中配置 LEAN_ID, LEAN_KEY 和 LEAN_MASTER_KEY 三个环境变量。它们的值分别对应上一步在 LeanCloud 中获得的 APP ID, APP KEY, Master Key。\"]},{\"header\":\"配置主题\",\"slug\":\"配置主题\",\"contents\":[\"设置好环境变量后，点击 Deploy 部署，一两分钟即可部署完成。之后在主题设置中设置 vercel 地址:\"]}],\"customFields\":{\"0\":[\"教程\"],\"1\":[\"Vercel\",\"插件\"]}},\"/devEnv/\":{\"title\":\"Dev Env\",\"contents\":[]},\"/start/\":{\"title\":\"Start\",\"contents\":[]}}}");self.onmessage=({data:e})=>{self.postMessage(_(e.query,P[e.routeLocale]))};
//# sourceMappingURL=original.js.map
